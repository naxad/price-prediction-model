import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from datetime import timedelta, date
from data_loader import get_stock_data, preprocess_data, create_sequences
from technical_indicators import (
    compute_ta_indicators,
    compute_market_volatility,
    update_ta_features,
    compute_hmm_sentiment  # NEW: Implements the HMM sentiment model
)
from news_sentiment import compute_news_sentiment
from models import (
    build_hybrid_model,
    build_cnn_model,
    train_regression,
    train_xgboost,
    train_random_forest,
    train_future_prediction_model,
    train_ensemble_model
)
import tensorflow as tf
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from training_memory import load_trained_model, get_callbacks, save_trained_model
import plotly.graph_objects as go

# ✅ Ensure TensorFlow uses GPU efficiently
gpus = tf.config.experimental.list_physical_devices('GPU')
if gpus:
    tf.config.experimental.set_memory_growth(gpus[0], True)

# ✅ Define Feature Set (order matters for scaling/inversion)
# Now including the HMM cumulative sentiment feature.
feature_columns = [
    "Open", "High", "Low", "Close", "Volume",
    "News_Sentiment", "Market_Volatility",
    "SMA_20", "SMA_50", "EMA_20", "EMA_50",
    "RSI_14", "MACD", "MFI", "ATR_14",
    "Bollinger_Upper", "Bollinger_Middle", "Bollinger_Lower", "ADX_14",
    "HMM_Cum_Sentiment"  # NEW: HMM-based cumulative sentiment signal
]

def inverse_transform_price(scaled_price, scaler, close_index):
    """
    Inverse-transform a single scaled price value using the MinMaxScaler parameters.
    (If you use a StandardScaler, adjust accordingly.)
    """
    return scaled_price * scaler.data_range_[close_index] + scaler.data_min_[close_index]

def predict_future_prices_ensemble(ensemble_model, models_dict, data, scaler, sequence_length, days_into_future=30):
    """
    Predict future prices using an ensemble meta-model that combines predictions
    from several models.

    Key improvements:
      - Invert the scaling to obtain a raw (unscaled) predicted price.
      - Dynamically update the input sequence using the updated "last row" computed 
        from the predicted price via update_ta_features.
      - Ensure the forecast starts exactly at the current actual price.
    
    models_dict: dict with keys "hybrid", "cnn", "xgb", "rf"
    """
    close_index = feature_columns.index("Close")
    
    # Get the last sequence (raw) and scale it.
    last_sequence_raw = data.iloc[-sequence_length:][feature_columns]
    last_sequence_scaled = scaler.transform(last_sequence_raw.values)
    
    # Keep track of the last row (raw) for dynamic updates.
    last_row_raw = data.iloc[-1][feature_columns].copy()
    
    predictions = []
    future_dates = []
    current_date = data.index[-1]
    
    # Force the first predicted price to equal the last actual price.
    first_predicted_price = data["Close"].iloc[-1]
    predictions.append(first_predicted_price)
    future_dates.append(current_date)
    
    for i in range(1, days_into_future):
        # Prepare input for each model.
        seq_input = last_sequence_scaled.reshape(1, sequence_length, len(feature_columns))
        flat_input = last_sequence_scaled.reshape(1, -1)
        
        hybrid_pred = models_dict["hybrid"].predict(seq_input)[0][0]
        cnn_pred = models_dict["cnn"].predict(seq_input)[0][0]
        xgb_pred = models_dict["xgb"].predict(flat_input)[0]
        rf_pred = models_dict["rf"].predict(flat_input)[0]
        
        # Combine predictions via the ensemble meta-model.
        ensemble_features = np.array([[hybrid_pred, cnn_pred, xgb_pred, rf_pred]])
        scaled_predicted_price = ensemble_model.predict(ensemble_features)[0]
        predicted_price = inverse_transform_price(scaled_predicted_price, scaler, close_index)
        
        predictions.append(predicted_price)
        
        # Advance the date (skip weekends)
        current_date += timedelta(days=1)
        while current_date.weekday() >= 5:
            current_date += timedelta(days=1)
        future_dates.append(current_date)
        
        # Update the raw last row using our TA update function.
        updated_row_raw = update_ta_features(last_row_raw, predicted_price)
        new_row_scaled = scaler.transform([updated_row_raw.values])[0]
        last_sequence_scaled = np.vstack([last_sequence_scaled[1:], new_row_scaled])
        last_row_raw = updated_row_raw.copy()
    
    return future_dates, predictions

if __name__ == "__main__":
    ticker = "AAPL"
    start_date = "2005-01-01"
    end_date = date.today().strftime('%Y-%m-%d')
    
    # ✅ Fetch & Process Stock Data
    data = get_stock_data(ticker, start_date, end_date)
    data = compute_news_sentiment(data, keyword="Apple Stock")
    data = compute_market_volatility(data)
    data = compute_ta_indicators(data)
    # Use the HMM sentiment function to compute daily and cumulative sentiment.
    data, hmm_model, state_sentiment = compute_hmm_sentiment(data, period=14)
    data.dropna(inplace=True)
    
    # ✅ Prepare Data for Training
    sequence_length = 60
    scaled_data, scaler, num_features = preprocess_data(data, feature_columns)
    X, y = create_sequences(scaled_data, sequence_length)
    
    # Use an 80/20 train/validation split.
    train_size = int(len(X) * 0.8)
    X_train, X_val = X[:train_size], X[train_size:]
    y_train, y_val = y[:train_size], y[train_size:]
    
    # ✅ Train Regression and Tree-Based Models
    reg_model = train_regression(X_train.reshape(X_train.shape[0], -1), y_train)
    xgb_model = train_xgboost(X_train.reshape(X_train.shape[0], -1), y_train)
    rf_model = train_random_forest(X_train.reshape(X_train.shape[0], -1), y_train)
    
    # ✅ Train Deep Learning Models
    cnn_model = build_cnn_model((sequence_length, X_train.shape[-1]))
    cnn_model.fit(
        X_train, y_train, 
        batch_size=32, epochs=100, 
        validation_data=(X_val, y_val), 
        verbose=1,
        callbacks=[EarlyStopping(monitor='val_loss', patience=10),
                   ReduceLROnPlateau(monitor='val_loss', patience=5)]
    )
    
    loaded_model, saved_num_features = load_trained_model()
    hybrid_model = (loaded_model if loaded_model and saved_num_features == num_features 
                    else build_hybrid_model((sequence_length, X_train.shape[-1])))
    hybrid_model.fit(
        X_train, y_train, 
        batch_size=32, epochs=70, 
        validation_data=(X_val, y_val), 
        callbacks=get_callbacks(),
        verbose=1
    )
    save_trained_model(hybrid_model, num_features)
    
    # ✅ Train Future Price Prediction Model (for longer-term trends)
    future_model = train_future_prediction_model(data)
    
    # ✅ Train the Ensemble Meta-Model (to learn optimal blending)
    ensemble_model = train_ensemble_model(
        hybrid_model, cnn_model, xgb_model, rf_model,
        X_val, y_val, sequence_length, feature_columns
    )
    
    # ✅ Get validation predictions for plotting.
    hybrid_val_preds_scaled = hybrid_model.predict(X_val).flatten()
    close_index = feature_columns.index("Close")
    hybrid_val_preds = np.array([inverse_transform_price(p, scaler, close_index) for p in hybrid_val_preds_scaled])
    
    # ✅ Predict Future Prices using the Ensemble Meta-Model
    models_dict = {"hybrid": hybrid_model, "cnn": cnn_model, "xgb": xgb_model, "rf": rf_model}
    future_days = 25
    future_dates, future_predictions = predict_future_prices_ensemble(
        ensemble_model, models_dict, data, scaler, sequence_length, days_into_future=future_days
    )
    
    # Extract the latest cumulative HMM sentiment and generate a market outlook message.
    latest_sentiment = data['HMM_Cum_Sentiment'].iloc[-1]
    if latest_sentiment > 0:
        sentiment_message = f"Bullish Trend Detected (Score: {latest_sentiment}). Expect prices above current levels."
    elif latest_sentiment < 0:
        sentiment_message = f"Bearish Trend Detected (Score: {latest_sentiment}). Expect prices below current levels."
    else:
        sentiment_message = f"Neutral Trend Detected (Score: {latest_sentiment})."
    
    # ✅ Plot Interactive Results
    fig = go.Figure()
    # Actual Prices (Blue Line)
    fig.add_trace(go.Scatter(
        x=data.index[-len(y_val):],
        y=data["Close"].values[-len(y_val):],
        mode='lines', name='Actual Price', line=dict(color='blue')
    ))
    # Hybrid Model Predictions (Orange Dashed Line)
    fig.add_trace(go.Scatter(
        x=data.index[-len(y_val):],
        y=hybrid_val_preds,
        mode='lines', name='Hybrid Prediction', line=dict(dash='dash', color='orange')
    ))
    # Ensemble Future Predictions (Red Dot-Dashed Line)
    fig.add_trace(go.Scatter(
        x=future_dates, y=future_predictions,
        mode='lines', name="Future Predictions", line=dict(dash='dot', color='red')
    ))
    fig.update_layout(
        title=f"Enhanced Stock Price Prediction with Dynamic TA & Ensemble Forecast\n{sentiment_message}",
        xaxis_title="Date",
        yaxis_title="Price",
        template="plotly_white",
        hovermode="x"
    )
    fig.show()
